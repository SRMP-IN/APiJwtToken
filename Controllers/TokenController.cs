using APiJwtToken.Configuration;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace APiJwtToken.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class TokenController : ControllerBase
    {
        private readonly UserManager<IdentityUser> userManager;
        private readonly Configuration.JwtConfig jwtConfig;

        public TokenController(UserManager<IdentityUser> _userManager, IOptionsMonitor<Configuration.JwtConfig> _jwtConfig)
        {
            jwtConfig = _jwtConfig.CurrentValue;
            userManager = _userManager;
        }

        [HttpGet]
        public async Task<IActionResult> Get()
        {
            string EmailId = "Test@test.com";
            string Id = "231093212";
            var IdentityUser = new IdentityUser() { Email = EmailId, UserName = EmailId, Id = Id };

            var isCreated = await userManager.CreateAsync(IdentityUser, "Test@134512");

            var jwtToken = GenerateJwtToken(IdentityUser);

            return Ok(jwtToken);
        }

        private object GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(jwtConfig.Secret);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(6),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }
    }
}

//https://dev.to/moe23/asp-net-core-5-rest-api-authentication-with-jwt-step-by-step-140d

//// GET api/<TokenController>/5
//[HttpGet("{id}")]
//public string Get(int id)
//{
//    return "value";
//}

//// POST api/<TokenController>
//[HttpPost]
//public void Post([FromBody] string value)
//{
//}

//// PUT api/<TokenController>/5
//[HttpPut("{id}")]
//public void Put(int id, [FromBody] string value)
//{
//}

//// DELETE api/<TokenController>/5
//[HttpDelete("{id}")]
//public void Delete(int id)
//{
//}